import Batch from './batch';
import World from './world';
import Result, { Options } from './result';
declare class Runner {
    batch: Batch;
    options: Options;
    world: World;
    expectations: Array<(res: Result) => void>;
    prompts: Array<RegExp | string>;
    responses: Array<string>;
    baseCmd: string;
    standardInput: null | string;
    constructor(options: Options);
    before(fn: () => void): Runner;
    after(fn: () => void): Runner;
    cwd(path: string): Runner;
    base(cmd: string): Runner;
    stdin(data: string): Runner;
    env(key: string, val: any): Runner;
    run(cmd: string, fn: () => void): Runner;
    timeout(ms: number): Runner;
    stdout(pattern: RegExp | string): Runner;
    stderr(pattern: RegExp | string): Runner;
    code(code: number): Runner;
    exist(path: string): Runner;
    match(file: string, pattern: RegExp | string): Runner;
    mkdir(path: string): Runner;
    exec(cmd: string, world: World): Runner;
    writeFile(path: string, data: string): Runner;
    rmdir(path: string): Runner;
    unlink(path: string): Runner;
    on(pattern: RegExp | string): Runner;
    respond(response: string): Runner;
    end(fn: () => void): void;
    clone(): Runner;
    expect(fn: () => void): Runner;
    execFn(cmd: string): Function;
}
export default Runner;
